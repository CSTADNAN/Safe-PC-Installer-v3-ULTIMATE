<#
.SYNOPSIS
    Safe PC Installer - Fully compatible with Windows PowerShell 5.1
    Auto-fixes: ExecutionPolicy, Blocked Files, Admin, Winget
    Shows native winget progress + 4-column menu + official App Installer info
.VERSION
    1.4.2 (PS 5.1 Compatible - Full App List + Category Colors)
#>

param(
    [switch]$DryRun,
    [switch]$AutoElevate,
    [string]$ConfigFile,
    [string]$Profile,
    [int]$Concurrency = 1,
    [switch]$AutoRetry,
    [switch]$NoPause,
    [switch]$SelfUpdate,
    [string]$LogDir = "C:\Users\Public\SafePCInstaller\logs"
)

# --- AUTO-FIX ZONE ---
$scriptPath = $MyInvocation.MyCommand.Path

try {
    if ($scriptPath -and (Test-Path $scriptPath)) {
        Unblock-File -Path $scriptPath -ErrorAction SilentlyContinue
    }

    if ((Get-ExecutionPolicy -Scope CurrentUser) -eq "Restricted") {
        Set-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope CurrentUser -Force -ErrorAction Stop
    }
} catch {
    Write-Host "‚ö†Ô∏è  Failed to auto-fix script: $_" -ForegroundColor Yellow
}

$isAdmin = ([Security.Principal.WindowsPrincipal][Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator)
if (-not $isAdmin -and $AutoElevate) {
    if ($scriptPath) {
        $argList = "-NoProfile -ExecutionPolicy Bypass -File `"$scriptPath`""
        if ($DryRun) { $argList += " -DryRun" }
        if ($ConfigFile) { $argList += " -ConfigFile `"$ConfigFile`"" }
        if ($Profile) { $argList += " -Profile `"$Profile`"" }
        if ($AutoRetry) { $argList += " -AutoRetry" }
        if ($NoPause) { $argList += " -NoPause" }
        if ($SelfUpdate) { $argList += " -SelfUpdate" }
        if ($LogDir -ne "C:\Users\Public\SafePCInstaller\logs") { $argList += " -LogDir `"$LogDir`"" }
        Start-Process PowerShell -ArgumentList $argList -Verb RunAs
        exit 0
    } else {
        Write-Host "‚ùå Script must be saved as a file to run as admin." -ForegroundColor Red
        exit 1
    }
}

# --- LOGGING SETUP ---
if (-not (Test-Path $LogDir)) {
    try {
        $null = New-Item -ItemType Directory -Path $LogDir -Force
    } catch {
        Write-Host "‚ö†Ô∏è  Cannot write to $LogDir. Using temp folder." -ForegroundColor Yellow
        $LogDir = Join-Path $env:TEMP "SafePCInstaller\logs"
        $null = New-Item -ItemType Directory -Path $LogDir -Force
    }
}
$LogFile = Join-Path $LogDir ("SafePCInstaller_" + (Get-Date -Format "yyyy-MM-dd_HH-mm-ss") + ".log")

function Write-Log {
    param([string]$Message, [string]$Level = "INFO")
    $timestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
    "$timestamp [$Level] $Message" | Out-File -FilePath $LogFile -Append -Encoding UTF8 -ErrorAction SilentlyContinue
    switch ($Level) {
        "ERROR" { Write-Host "[$Level] $Message" -ForegroundColor Red }
        "WARN"  { Write-Host "[$Level] $Message" -ForegroundColor Yellow }
        default { Write-Host "[$Level] $Message" -ForegroundColor DarkGray }
    }
}

Write-Log "Script started. DryRun: $($DryRun.IsPresent), Profile: '$Profile', AutoRetry: $($AutoRetry.IsPresent)"

# --- SAFE PAUSE ---
function Pause-Safe {
    if (-not $NoPause) {
        Write-Host "Press Enter to continue..." -ForegroundColor (Get-SafeColor $script:Colors.Gray)
        $null = Read-Host
    }
}

# --- ‚úÖ FIXED: Get-SafeColor (PS 5.1 compatible) ---
function Get-SafeColor {
    param([string]$ColorName)
    $validColors = [System.Enum]::GetNames([System.ConsoleColor])
    if ($ColorName -and ($validColors -contains $ColorName)) {
        return $ColorName
    }
    return "White"
}

$script:Colors = @{
    Primary   = "Cyan"
    Success   = "Green"
    Warning   = "Yellow"
    Error     = "Red"
    Info      = "White"
    Highlight = "Magenta"
    Gray      = "Gray"
    DarkGray  = "DarkGray"
}

# --- PROFILES ---
$script:Profiles = @{
    "Developer" = @("VS Code", "Git", "Python", "Node.js", "Docker", "Postman", "Notepad++", "Wireshark", "AutoHotkey")
    # UPDATED: 'Microsoft 365' is now explicitly in the Office profile.
    "Gamer"     = @("Steam", "Discord", "OBS Studio", "MSI Afterburner", "Epic Games", "GOG Galaxy", "Battle.net", "GeForce Experience")
    "Office"    = @("Microsoft 365", "OneDrive", "Teams", "Zoom", "Slack", "LibreOffice", "Notion", "Google Drive") 
}

# --- FULL SOFTWARE LIST (v1.4.2) - Enhanced with your full list ---
$script:BuiltInSoftwareList = @(
    # === BROWSERS ===
    @{Name="üåê Chrome"; Id="Google.Chrome"; Category="Browsers"},
    @{Name="ü¶ä Firefox"; Id="Mozilla.Firefox"; Category="Browsers"},
    @{Name="ü™ü Edge"; Id="Microsoft.Edge"; Category="Browsers"},
    @{Name="ü¶Å Brave"; Id="Brave.Brave"; Category="Browsers"},
    @{Name="üî∑ Opera"; Id="Opera.Opera"; Category="Browsers"},
    @{Name="üü£ Vivaldi"; Id="Vivaldi.Vivaldi"; Category="Browsers"},
    @{Name="üî∂ Arc"; Id="Arc.Arc"; Category="Browsers"}, # <-- CONFIRMED (ARC BROWSER)
    @{Name="üî∑ Chromium"; Id="Chromium.Chromium"; Category="Browsers"},

    # === COMMUNICATION / MESSAGING ===
    @{Name="üìû Zoom"; Id="Zoom.Zoom"; Category="Communication"},
    @{Name="üí¨ Discord"; Id="Discord.Discord"; Category="Communication"},
    @{Name="üí¨ Teams"; Id="Microsoft.Teams"; Category="Communication"},
    @{Name="üí¨ WhatsApp"; Id="WhatsApp.WhatsApp"; Category="Communication"}, # <-- ADDED (WHATSAPP)
    @{Name="üí¨ Telegram"; Id="Telegram.TelegramDesktop"; Category="Communication"}, # <-- ADDED (TELEGRAM)
    @{Name="üìß Thunderbird"; Id="Mozilla.Thunderbird"; Category="Communication"},
    @{Name="üí¨ Pidgin"; Id="Pidgin.Pidgin"; Category="Communication"},
    @{Name="üí¨ Trillian"; Id="Cerulean.Trillian"; Category="Communication"},

    # === MEDIA / AUDIO / VIDEO ===
    @{Name="üé• VLC"; Id="VideoLAN.VLC"; Category="Media"},
    @{Name="üéµ Spotify"; Id="Spotify.Spotify"; Category="Media"},
    @{Name="üéß AIMP"; Id="AIMP.AIMP"; Category="Media"},
    @{Name="üéµ foobar2000"; Id="PeterPawlowski.foobar2000"; Category="Media"},
    @{Name="üéµ Winamp"; Id="Winamp.Winamp"; Category="Media"},
    @{Name="üéµ MusicBee"; Id="MusicBee.MusicBee"; Category="Media"},
    @{Name="üîä Audacity"; Id="Audacity.Audacity"; Category="Media"},
    @{Name="üé¨ HandBrake"; Id="HandBrake.HandBrake"; Category="Media"},
    @{Name="üíø K-Lite Codecs"; Id="CodecGuide.K-LiteCodecPack.Mega"; Category="Media"},
    @{Name="üé¨ GOM Player"; Id="GOMPlayer.GOMPlayer"; Category="Media"},
    @{Name="üíø CCCP"; Id="CCCP.CCCP"; Category="Media"},
    @{Name="üéµ MediaMonkey"; Id="MediaMonkey.MediaMonkey"; Category="Media"},
    @{Name="üéµ iTunes"; Id="Apple.iTunes"; Category="Media"},

    # === DOCUMENTS / OFFICE ===
    @{Name="üìï Foxit Reader"; Id="Foxit.FoxitReader"; Category="Documents"},
    @{Name="üìÑ Adobe Reader"; Id="Adobe.Acrobat.Reader.64-bit"; Category="Documents"},
    @{Name="üìë Microsoft 365"; Id="Microsoft.Office"; Category="Office"}, # <-- ADDED (MICROSOFT 365)
    @{Name="üìë LibreOffice"; Id="TheDocumentFoundation.LibreOffice"; Category="Office"},
    @{Name="üìë OpenOffice"; Id="Apache.OpenOffice"; Category="Office"},
    @{Name="üìÑ SumatraPDF"; Id="SumatraPDF.SumatraPDF"; Category="Documents"},
    @{Name="üñ®Ô∏è CutePDF"; Id="CutePDF.CutePDF"; Category="Documents"},

    # === CLOUD / ONLINE STORAGE ===
    @{Name="‚òÅÔ∏è OneDrive"; Id="Microsoft.OneDrive"; Category="Cloud"},
    @{Name="‚òÅÔ∏è Google Drive"; Id="Google.GoogleDrive"; Category="Cloud"},
    @{Name="‚òÅÔ∏è Dropbox"; Id="Dropbox.Dropbox"; Category="Cloud"},
    @{Name="‚òÅÔ∏è SugarSync"; Id="SugarSync.SugarSync"; Category="Cloud"},

    # === GAMING / LAUNCHERS ===
    @{Name="üéÆ Steam"; Id="Valve.Steam"; Category="Gaming"},
    @{Name="üì± Epic Games"; Id="EpicGames.EpicGamesLauncher"; Category="Gaming"},

    # === SECURITY ===
    @{Name="üõ°Ô∏è Malwarebytes"; Id="Malwarebytes.Malwarebytes"; Category="Security"},
    @{Name="üõ°Ô∏è Avast"; Id="Avast.Antivirus"; Category="Security"},
    @{Name="üõ°Ô∏è AVG"; Id="AVG.Antivirus"; Category="Security"},
    @{Name="üõ°Ô∏è Avira"; Id="Avira.Antivirus"; Category="Security"},
    @{Name="üõ°Ô∏è Spybot 2"; Id="Safer-Networking.SpybotSD"; Category="Security"},
    @{Name="üõ°Ô∏è SUPERAntiSpyware"; Id="SUPERAntiSpyware.SUPERAntiSpyware"; Category="Security"},
    @{Name="üîê KeePass 2"; Id="KeePass.KeePass"; Category="Security"},

    # === UTILITIES ===
    @{Name="üîç Everything"; Id="voidtools.Everything"; Category="Utilities"},
    @{Name="üöÄ IDM"; Id="Tonec.InternetDownloadManager"; Category="Utilities"}, # <-- ADDED (IDM)
    @{Name="üßπ CCleaner"; Id="Piriform.CCleaner"; Category="Utilities"},
    @{Name="üìÅ TeraCopy"; Id="CodeSector.TeraCopy"; Category="Utilities"},
    @{Name="üß∞ Glary Utilities"; Id="Glarysoft.GlaryUtilities"; Category="Utilities"},
    @{Name="üß∞ Revo Uninstaller"; Id="RevoUninstaller.RevoUninstaller"; Category="Utilities"},
    @{Name="üß† CPU-Z"; Id="CPUID.CPU-Z"; Category="System"},
    @{Name="üß† GPU-Z"; Id="TechPowerUp.GPU-Z"; Category="System"},
    @{Name="üìä WizTree"; Id="AntibodySoftware.WizTree"; Category="Utilities"},
    @{Name="üìä WinDirStat"; Id="WinDirStat.WinDirStat"; Category="Utilities"},
    @{Name="üöÄ Launchy"; Id="Launchy.Launchy"; Category="Utilities"},
    @{Name="üñ•Ô∏è Open-Shell"; Id="Open-Shell.Open-Shell-Menu"; Category="Utilities"},

    # === COMPRESSION ===
    @{Name="üì¶ 7-Zip"; Id="7zip.7zip"; Category="Compression"},
    @{Name="üì¶ WinRAR"; Id="RARLab.WinRAR"; Category="Compression"},
    @{Name="üì¶ PeaZip"; Id="PeaZip.PeaZip"; Category="Compression"},

    # === IMAGING / GRAPHICS ===
    @{Name="üé® GIMP"; Id="GIMP.GIMP"; Category="Imaging"},
    @{Name="üñåÔ∏è Krita"; Id="Krita.Krita"; Category="Imaging"},
    @{Name="‚úèÔ∏è Inkscape"; Id="Inkscape.Inkscape"; Category="Imaging"},
    @{Name="üñºÔ∏è Paint.NET"; Id="dotPDN.PaintDotNet"; Category="Imaging"},
    @{Name="üñºÔ∏è IrfanView"; Id="IrfanSkiljan.IrfanView"; Category="Imaging"},
    @{Name="üñºÔ∏è XnView"; Id="XnSoft.XnViewMP"; Category="Imaging"},
    @{Name="üñºÔ∏è FastStone"; Id="FastStone.ImageViewer"; Category="Imaging"},
    @{Name="üì∏ Greenshot"; Id="Greenshot.Greenshot"; Category="Imaging"},
    @{Name="üì∏ ShareX"; Id="ShareX.ShareX"; Category="Imaging"},
    @{Name="üß± Blender"; Id="BlenderFoundation.Blender"; Category="Imaging"},

    # === DEVELOPMENT TOOLS ===
    @{Name="üíª VS Code"; Id="Microsoft.VisualStudioCode"; Category="Development"},
    @{Name="üíª Cursor"; Id="Cursor.Cursor"; Category="Development"},
    @{Name="üß± Visual Studio 2022"; Id="Microsoft.VisualStudio.2022.Community"; Category="Development"},
    @{Name="üü¢ Node.js LTS"; Id="OpenJS.NodeJS.LTS"; Category="Development"},
    @{Name="üêç Python 3"; Id="Python.Python.3"; Category="Development"},
    @{Name="üêç Python 2"; Id="Python.Python.2"; Category="Development"},
    @{Name="üì§ Postman"; Id="Postman.Postman"; Category="Development"},
    @{Name="üì° Wireshark"; Id="WiresharkFoundation.Wireshark"; Category="Development"},
    @{Name="üì§ FileZilla"; Id="FileZilla.FileZilla"; Category="Development"},
    @{Name="üìù Notepad++"; Id="Notepad++.Notepad++"; Category="Development"},
    @{Name="üì§ WinSCP"; Id="WinSCP.WinSCP"; Category="Development"},
    @{Name="üîê PuTTY"; Id="PuTTY.PuTTY"; Category="Development"},
    @{Name="üîÑ WinMerge"; Id="WinMerge.WinMerge"; Category="Development"},
    @{Name="‚öôÔ∏è Git"; Id="Git.Git"; Category="Development"},
    @{Name="üß± Eclipse"; Id="Eclipse.Eclipse"; Category="Development"},

    # === RUNTIMES (.NET, JAVA, VC++) ===
    @{Name="‚öôÔ∏è .NET 4.8.1"; Id="Microsoft.DotNet.Framework.4.8.1"; Category="Runtimes"},
    @{Name="‚öôÔ∏è .NET Desktop Runtime x64 8"; Id="Microsoft.DotNet.DesktopRuntime.8"; Category="Runtimes"},
    @{Name="‚öôÔ∏è .NET Desktop Runtime x64 9"; Id="Microsoft.DotNet.DesktopRuntime.9"; Category="Runtimes"},
    @{Name="‚öôÔ∏è ASP.NET Core Runtime x64 8"; Id="Microsoft.DotNet.AspNetCore.Runtime.8"; Category="Runtimes"},
    @{Name="‚öôÔ∏è ASP.NET Core Runtime x64 9"; Id="Microsoft.DotNet.AspNetCore.Runtime.9"; Category="Runtimes"},
    @{Name="‚òï Java JRE 8 (Adoptium)"; Id="EclipseAdoptium.JRE.8"; Category="Runtimes"},
    @{Name="‚òï Java JRE 11 (Adoptium)"; Id="EclipseAdoptium.JRE.11"; Category="Runtimes"},
    @{Name="‚òï Java JRE 17 (Adoptium)"; Id="EclipseAdoptium.JRE.17"; Category="Runtimes"},
    @{Name="‚òï Java JRE 21 (Adoptium)"; Id="EclipseAdoptium.JRE.21"; Category="Runtimes"},
    @{Name="‚òï JDK 17 (Corretto)"; Id="Amazon.Corretto.17"; Category="Runtimes"},
    @{Name="‚òï JDK 21 (Corretto)"; Id="Amazon.Corretto.21"; Category="Runtimes"},
    @{Name="‚öôÔ∏è VC++ x64 2015+"; Id="Microsoft.VCRedist.2015+.x64"; Category="Runtimes"},
    @{Name="‚öôÔ∏è VC++ x86 2015+"; Id="Microsoft.VCRedist.2015+.x86"; Category="Runtimes"},
    @{Name="‚öôÔ∏è VC++ arm64 2015+"; Id="Microsoft.VCRedist.2015+.arm64"; Category="Runtimes"},
    @{Name="‚öôÔ∏è VC++ x64 2013"; Id="Microsoft.VCRedist.2013.x64"; Category="Runtimes"},
    @{Name="‚öôÔ∏è VC++ x86 2013"; Id="Microsoft.VCRedist.2013.x86"; Category="Runtimes"},

    # === REMOTE ACCESS ===
    @{Name="üñ•Ô∏è AnyDesk"; Id="AnyDeskSoftwareGmbH.AnyDesk"; Category="RemoteAccess"},
    @{Name="üñ•Ô∏è TeamViewer"; Id="TeamViewer.TeamViewer"; Category="RemoteAccess"},
    @{Name="üñ•Ô∏è TightVNC"; Id="TightVNC.TightVNC"; Category="RemoteAccess"},
    @{Name="üñ•Ô∏è RealVNC Viewer"; Id="RealVNC.VNCViewer"; Category="RemoteAccess"},
    @{Name="üñ•Ô∏è RealVNC Server"; Id="RealVNC.VNCServer"; Category="RemoteAccess"},

    # === FILE SHARING ===
    @{Name="üß≤ qBittorrent"; Id="qBittorrent.qBittorrent"; Category="FileSharing"},

    # === OTHER ===
    @{Name="üìù Evernote"; Id="Evernote.Evernote"; Category="Productivity"},
    @{Name="üåç Google Earth"; Id="Google.Earth"; Category="Other"},
    @{Name="ü¶æ NV Access"; Id="NVAccess.NVDA"; Category="Accessibility"}
)

# --- CATEGORY ‚Üí COLOR MAP ---
$script:CategoryColorMap = @{
    "Browsers"       = "Primary"
    "Media"          = "Highlight"
    "Communication"  = "Success"
    "Office"         = "Info"
    "Cloud"          = "Primary"
    "Gaming"         = "Highlight"
    "Utilities"      = "Gray"
    "System"         = "DarkGray"
    "Development"    = "Primary"
    "Security"       = "Error"
    "Runtimes"       = "DarkGray"
    "Documents"      = "Info"
    "Productivity"   = "Info"
    "Compression"    = "Gray"
    "Imaging"        = "Warning"
    "RemoteAccess"   = "Success"
    "FileSharing"    = "Gray"
    "Other"          = "Info"
    "Accessibility"  = "Magenta"
}

# --- BUILD FINAL LIST ---
$softwareList = @()
foreach ($app in $script:BuiltInSoftwareList) {
    if (-not $app.Name -or -not $app.Id) { continue }
    $colorKey = if ($script:CategoryColorMap.ContainsKey($app.Category)) { $script:CategoryColorMap[$app.Category] } else { "Info" }
    $app.Color = Get-SafeColor $script:Colors[$colorKey]
    $softwareList += $app
}

# --- WINGET CHECK (WITH OFFICIAL MICROSOFT INFO) ---
$winget = Get-Command winget -ErrorAction SilentlyContinue
if (-not $winget) {
    Write-Host "‚ùå Microsoft Winget (Windows Package Manager) is not installed!" -ForegroundColor Red
    Write-Host "`n‚ÑπÔ∏è  Winget is part of 'App Installer', a Microsoft system component." -ForegroundColor Cyan
    Write-Host "   ‚Ä¢ Makes sideloading Windows 10 apps easy: Just double-click the app package" -ForegroundColor Gray
    Write-Host "   ‚Ä¢ Shows app name, publisher, version, logo, and requested capabilities" -ForegroundColor Gray
    Write-Host "   ‚Ä¢ Windows Package Manager is supported through App Installer starting on Windows 10 1809" -ForegroundColor Gray
    Write-Host "   ‚Ä¢ This application is currently only available for desktop PCs" -ForegroundColor Gray
    Write-Host "`nüëâ To install it:" -ForegroundColor Yellow
    Write-Host "   1. Open Microsoft Store" -ForegroundColor White
    Write-Host "   2. Go to: https://apps.microsoft.com/detail/9NBLGGH4NNS1    " -ForegroundColor Cyan
    Write-Host "   3. Click 'Get' to install 'App Installer'" -ForegroundColor White
    Write-Host "`n   (This will enable winget for safe, script-based app installation)" -ForegroundColor DarkGray

    if (-not $DryRun) {
        Write-Log "Winget missing. Exiting." "ERROR"
        Pause-Safe
        exit 2
    } else {
        Write-Host "`nüß™ Continuing in DryRun mode (no installation will occur)..." -ForegroundColor Magenta
    }
}

# --- RETRY INSTALL FUNCTION (WITHOUT --silent TO SHOW PROGRESS) ---
function Invoke-WingetWithRetry {
    param([string]$Id, [string]$Name, [int]$MaxRetries = 0, [bool]$DryRunMode = $false)

    if ($DryRunMode) {
        Write-Host "[DRY-RUN] Would install: $Name (ID: $Id)" -ForegroundColor Yellow
        Write-Log "DRY-RUN: $Name ($Id)"
        return $true
    }

    for ($attempt = 1; $attempt -le ($MaxRetries + 1); $attempt++) {
        try {
            if ($attempt -gt 1) {
                $delay = [Math]::Min(30, [Math]::Pow(2, $attempt - 2) * 5)
                Write-Host "üîÅ Attempt $attempt. Waiting $delay sec..." -ForegroundColor (Get-SafeColor $script:Colors.Warning)
                Start-Sleep -Seconds $delay
            }

            Write-Host "`n‚è≥ Installing: $Name" -ForegroundColor (Get-SafeColor $script:Colors.Primary)
            Write-Host "   (Progress will appear below if supported by the installer)" -ForegroundColor Gray
            Write-Log "Install attempt $attempt`: $Name ($Id)"

            $args = @("install", "--id", $Id, "--accept-package-agreements", "--accept-source-agreements")
            Start-Process -FilePath "winget" -ArgumentList $args -Wait -NoNewWindow

            $exitCode = $LASTEXITCODE

            if ($exitCode -eq 0) {
                Write-Host "‚úÖ Success: $Name" -ForegroundColor (Get-SafeColor $script:Colors.Success)
                Write-Log "Success: $Name"
                return $true
            } else {
                Write-Log "Attempt $attempt failed: $Name | ExitCode: $exitCode" "WARN"
                if ($attempt -lt ($MaxRetries + 1)) {
                    Write-Host "‚ö†Ô∏è  Failed (Code: $exitCode). Retrying..." -ForegroundColor (Get-SafeColor $script:Colors.Warning)
                }
            }
        } catch {
            Write-Log "Exception on attempt $attempt for $Name`: $_" "ERROR"
        }
    }

    Write-Host "‚ùå Failed after $($MaxRetries + 1) attempts: $Name" -ForegroundColor (Get-SafeColor $script:Colors.Error)
    Write-Log "Permanent failure: $Name" "ERROR"
    return $false
}

# --- SELECTION PARSER ---
function Parse-Selection {
    param([string]$InputStr)
    if (-not $InputStr) { return @() }

    if ($script:Profiles.ContainsKey($InputStr)) {
        $targetBaseNames = $script:Profiles[$InputStr]
        return $softwareList | Where-Object {
            $baseName = ($_.Name -replace '^[^ ]+ ', '')
            $targetBaseNames -contains $baseName
        } | Sort-Object Name -Unique
    }

    $result = @()
    $seen = @{}
    $parts = $InputStr -split ',' | ForEach-Object { $_.Trim() }
    foreach ($part in $parts) {
        if ($part -match '^(\d+)-(\d+)$') {
            $start, $end = [int]$Matches[1], [int]$Matches[2]
            for ($i = $start; $i -le $end; $i++) {
                if ($i -ge 1 -and $i -le $softwareList.Count) {
                    $app = $softwareList[$i - 1]
                    if (-not $seen.ContainsKey($app.Id)) {
                        $result += $app
                        $seen[$app.Id] = $true
                    }
                }
            }
        } elseif ($part -match '^\d+$') {
            $idx = [int]$part - 1
            if ($idx -ge 0 -and $idx -lt $softwareList.Count) {
                $app = $softwareList[$idx]
                if (-not $seen.ContainsKey($app.Id)) {
                    $result += $app
                    $seen[$app.Id] = $true
                }
            }
        }
    }
    return $result
}

# --- UI: 4-COLUMN MENU ---
function Show-Header {
    Clear-Host
    Write-Host @"
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë        üõ°Ô∏è  SAFE PC INSTALLER (v1.4.2 - PS 5.1)     ‚ïë
‚ïë        Made by: MD Adnan | 100% Winget Only        ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
"@ -ForegroundColor (Get-SafeColor $script:Colors.Primary)

    Write-Host "`nüì¶ Apps: $($softwareList.Count) | üîê Admin: $(if ($isAdmin) { '‚úÖ Yes' } else { '‚ùå No' }) | üåê Winget: $(if ($winget) { '‚úÖ Ready' } else { '‚ùå Missing' })" -ForegroundColor (Get-SafeColor $script:Colors.Info)
    if ($DryRun) { Write-Host "üß™ MODE: DRY-RUN (No changes will be made)" -ForegroundColor Yellow }
    Write-Host ""
}

function Show-Menu {
    Write-Host "‚ö° [I] Install  [L] List  [A] Update All  [Q] Quit" -ForegroundColor (Get-SafeColor $script:Colors.Warning)
    Write-Host ("-" * 78) -ForegroundColor DarkGray

    $cols = 4
    $rows = [Math]::Ceiling($softwareList.Count / $cols)
    for ($row = 0; $row -lt $rows; $row++) {
        for ($col = 0; $col -lt $cols; $col++) {
            $index = $row + $col * $rows
            if ($index -lt $softwareList.Count) {
                $app = $softwareList[$index]
                $num = $index + 1
                $numStr = if ($num -lt 10) { " [$num]" } else { "[$num]" }
                $item = "$numStr $($app.Name.PadRight(24))"
                Write-Host $item -NoNewline -ForegroundColor (Get-SafeColor $app.Color)
            } else {
                Write-Host "".PadRight(28) -NoNewline
            }
        }
        Write-Host ""
    }

    Write-Host "`nüí° Tip: Enter 'Dev', '1,3,5', or '10-15'" -ForegroundColor Gray
}

# --- MAIN LOOP ---
do {
    Show-Header
    Show-Menu
    Write-Host "`nüëâ Your choice: " -NoNewline -ForegroundColor (Get-SafeColor $script:Colors.Highlight)
    $choice = Read-Host

    switch -Regex ($choice.Trim()) {
        "^[Ii]$" {
            Write-Host "Enter numbers or profile (e.g., Dev, 1,3,5): " -NoNewline -ForegroundColor (Get-SafeColor $script:Colors.Info)
            $input = Read-Host
            $selected = Parse-Selection -InputStr $input
            if ($selected.Count -eq 0) {
                Write-Host "‚ùå No valid apps selected." -ForegroundColor (Get-SafeColor $script:Colors.Error)
                Pause-Safe
                continue
            }

            Write-Host "`nüì¶ Selected:" -ForegroundColor (Get-SafeColor $script:Colors.Info)
            $selected | ForEach-Object { Write-Host "   ‚Ä¢ $($_.Name)" -ForegroundColor (Get-SafeColor $_.Color) }

            Write-Host "`n‚ö†Ô∏è  Confirm install? (Y/N): " -NoNewline -ForegroundColor (Get-SafeColor $script:Colors.Warning)
            if ((Read-Host) -notmatch '^[Yy]$') { continue }

            $successCount = 0
            $maxRetries = if ($AutoRetry) { 2 } else { 0 }
            foreach ($app in $selected) {
                if (Invoke-WingetWithRetry -Id $app.Id -Name $app.Name -MaxRetries $maxRetries -DryRunMode $DryRun.IsPresent) {
                    $successCount++
                }
            }

            $exportPath = Join-Path $LogDir "installed.json"
            $selected | Select-Object Name, Id, Category | ConvertTo-Json | Out-File $exportPath -Encoding UTF8

            Write-Host "`n‚úÖ Done! $successCount of $($selected.Count) succeeded." -ForegroundColor (Get-SafeColor $script:Colors.Success)
            Write-Log "Batch install finished. Success: $successCount / $($selected.Count)"

            if ($DryRun) {
                Write-Host "`n[DRY-RUN SUMMARY] Selected: $($selected.Count) | Valid: $($selected.Count) | Skipped: 0" -ForegroundColor Yellow
            }
            Pause-Safe
        }
        "^[Ll]$" {
            Clear-Host
            Show-Header
            Write-Host "üìã Installed Apps:" -ForegroundColor (Get-SafeColor $script:Colors.Info)
            if ($winget) { winget list --accept-source-agreements } else { Write-Host "Winget not available." }
            Pause-Safe
        }
        "^[Aa]$" {
            Clear-Host
            if ($DryRun) {
                Write-Host "[DRY-RUN] Would run: winget upgrade --all" -ForegroundColor Yellow
                Write-Log "DRY-RUN: winget upgrade --all"
            } else {
                Write-Host "üîÑ Updating all apps..." -ForegroundColor (Get-SafeColor $script:Colors.Highlight)
                Write-Host "   (Progress will appear below)" -ForegroundColor Gray
                Start-Process -FilePath "winget" -ArgumentList "upgrade --all --accept-package-agreements --accept-source-agreements" -Wait -NoNewWindow
                $ec = $LASTEXITCODE
                if ($ec -eq 0) {
                    Write-Host "`n‚úÖ Updates complete!" -ForegroundColor (Get-SafeColor $script:Colors.Success)
                } else {
                    Write-Host "`n‚ùå Upgrade failed (ExitCode: $ec)" -ForegroundColor (Get-SafeColor $script:Colors.Error)
                }
                Write-Log "Upgrade all finished. ExitCode: $ec"
            }
            Pause-Safe
        }
        "^[Qq]$" {
            Write-Host "`n‚úÖ Thank you! Stay safe. üòä" -ForegroundColor (Get-SafeColor $script:Colors.Success)
            Write-Log "Script exited by user."
            exit 0
        }
        default {
            if ($script:Profiles.ContainsKey($choice)) {
                $input = $choice
                $selected = Parse-Selection -InputStr $input
                if ($selected.Count -eq 0) { Write-Host "‚ùå No apps in profile '$choice'." -ForegroundColor Red; Pause-Safe; continue }
                Write-Host "`nüì¶ Selected from profile '$choice':" -ForegroundColor (Get-SafeColor $script:Colors.Info)
                $selected | ForEach-Object { Write-Host "   ‚Ä¢ $($_.Name)" -ForegroundColor (Get-SafeColor $_.Color) }
                Write-Host "`n‚ö†Ô∏è  Confirm install? (Y/N): " -NoNewline -ForegroundColor (Get-SafeColor $script:Colors.Warning)
                if ((Read-Host) -notmatch '^[Yy]$') { continue }
                $successCount = 0
                $maxRetries = if ($AutoRetry) { 2 } else { 0 }
                foreach ($app in $selected) {
                    if (Invoke-WingetWithRetry -Id $app.Id -Name $app.Name -MaxRetries $maxRetries -DryRunMode $DryRun.IsPresent) {
                        $successCount++
                    }
                }
                $exportPath = Join-Path $LogDir "installed.json"
                $selected | Select-Object Name, Id, Category | ConvertTo-Json | Out-File $exportPath -Encoding UTF8
                Write-Host "`n‚úÖ Done! $successCount of $($selected.Count) succeeded." -ForegroundColor (Get-SafeColor $script:Colors.Success)
                Write-Log "Profile install finished: $choice | Success: $successCount / $($selected.Count)"
                if ($DryRun) {
                    Write-Host "`n[DRY-RUN SUMMARY] Profile: $choice | Apps: $($selected.Count)" -ForegroundColor Yellow
                }
                Pause-Safe
            } else {
                Write-Host "‚ùå Invalid option. Use I, L, A, Q, or profile (Dev/Gamer/Office)." -ForegroundColor (Get-SafeColor $script:Colors.Error)
                Start-Sleep -Seconds 1
            }
        }
    }
} while ($true)
